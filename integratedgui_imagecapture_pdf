import tkinter as tk
import cv2
from fpdf import FPDF
from PIL import Image
import cv2
import numpy as np
from PIL import Image, ImageEnhance

import pandas as pd
import matplotlib
from pylab import title, figure, xlabel, ylabel, xticks, bar, legend, axis, savefig
from PIL import Image

def pdfgenerator(image,data):
    image = Image.open(image)
    new_image = image.resize((400, 400))
    new_image.save('image2.jpg')

    if (data == 1):
        classifier = 'Normal'
        action = 'Stay at home'
    else:
        classifier = 'Abnormal'
        action = 'Please see your PCP'
        
    patient_name = data[0]
    gender = data[1]
    DOB = data[2]
    address = data[3]
    physician_name = data[4]
    
    pdf = FPDF()
    pdf.add_page()
    pdf.set_xy(0, 0)
    pdf.set_font('helvetica', 'B', 12)
    pdf.cell(5)
    pdf.image('/Users/udaytripathi/Desktop/otoAI_logo.png', x = None, y = None, w = 20, h = 0, type = '', link = '')
    
    pdf.cell(60)
    pdf.cell(90, 10, "OtoAI Ear Exam Results and Preliminary Diagnosis", 0, 2, 'C')
    pdf.cell(90, 2, " ", 0, 2, 'C')
    pdf.cell(-40)
    pdf.set_font('helvetica', '', 12)
    pdf.cell(160, 10, 'Patient Name:' + " " + patient_name, 1, 2, 'L')
    pdf.cell(160, 10, 'Gender:' + " " + gender, 1, 2, 'L')
    pdf.cell(160, 10, 'Date of Birth (MM/DD/YYYY):' + " " + DOB, 1, 2, 'L')
    pdf.cell(160, 10, 'Address:' + " " + address, 1, 2, 'L')
    pdf.cell(160, 10, 'Physician Name:' + " " + physician_name, 1, 2, 'L')
    pdf.cell(-120)
    pdf.set_font('helvetica', '', 12)

    pdf.cell(-70)
    pdf.cell(90, 5, " ", 0, 2, 'C')
    pdf.cell(200)
    pdf.image('image2.jpg', x = None, y = None, w = 0, h = 0, type = '', link = '')
    
    pdf.cell(90, 2, " ", 0, 2, 'C')
    pdf.cell(140, 10, 'Classification: '+ '%s' % classifier, 1, 2, 'C')
    pdf.cell(140, 10, 'Percent Confidence: '  '%s' % '90%', 1, 2, 'C')
    
    pdf.cell(90,5, " ", 0, 2, 'C')
    pdf.cell(-20)
    pdf.set_font('helvetica', '', 8)
    pdf.cell(40)
    pdf.cell(90,10,"While the OtoAI algorithm is robust in nature, patients should refer to their primary care physicians for next steps",0,2,'C')
    pdf.output('output.pdf', 'F')

def image_capture():
    cam = cv2.VideoCapture(0)
    cv2.namedWindow("test")
    img_counter = 0

    while True:
        ret, frame = cam.read()
        if not ret:
            print("failed to grab frame")
            break
        cv2.imshow("test", frame)

        k = cv2.waitKey(1)
        if k%256 == 27:
            # ESC pressed
            print("Escape hit, closing...")
            break
        elif k%256 == 32:
            # SPACE pressed
            img_name = "opencv_frame_{}.png".format(img_counter)
            cv2.imwrite(img_name, frame)
            print("{} written!".format(img_name))
            img_counter += 1

    cam.release()
    cv2.destroyAllWindows()

#histogram equalization to improve contrast
def improve_contrast_image_using_clahe(bgr_image):
    hsv = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2HSV)
    hsv_planes = cv2.split(hsv)
    clahe = cv2.createCLAHE(clipLimit=2, tileGridSize=(7, 7))
    hsv_planes[2] = clahe.apply(hsv_planes[2])
    hsv = cv2.merge(hsv_planes)
    return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)


def image_enhancement(image):
    ####CROP, CONTRAST, and ENHANCE
    images = [image] #input appropriate image name(s)
    for name in images:

        img = cv2.imread(name)

        ###CONTRAST
        improved = improve_contrast_image_using_clahe(img)

        ###CROP
        gray = cv2.cvtColor(improved, cv2.COLOR_BGR2GRAY)
        thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_OTSU + cv2.THRESH_BINARY)[1]
        # Find contour and sort by contour area
        cnts = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        cnts = cnts[0] if len(cnts) == 2 else cnts[1]
        cnts = sorted(cnts, key=cv2.contourArea, reverse=True)
        # Find bounding box and extract ROI
        for c in cnts:
            x,y,w,h = cv2.boundingRect(c)
            ROI = improved[y:y+h, x:x+w]
            break
        cv2.imwrite('image_enhanced.jpg',ROI)

def proceed_image():
    patient_name = patient_name_1.get()
    gender = gender_1.get()
    dob = dob_1.get()
    address = address_1.get()
    physician_name = physician_name_1.get()
    
    data = [patient_name, gender, dob, address, physician_name]
    
    image_capture()
    image_enhancement('opencv_frame_0.png')
    pdfgenerator('image_enhanced.jpg',data)

master = tk.Tk()
tk.Label(master, text="Patient Name:").grid(row=0)
tk.Label(master, text="Gender:").grid(row=1)
tk.Label(master, text="DOB (MM/DD/YYYY):").grid(row=2)
tk.Label(master, text="Address:").grid(row=3)
tk.Label(master, text="Physician's Name:").grid(row=4)

patient_name_1 = tk.Entry(master)
gender_1 = tk.Entry(master)
dob_1 = tk.Entry(master)
address_1 = tk.Entry(master)
physician_name_1 = tk.Entry(master)

patient_name_1.grid(row=0, column=1)
gender_1.grid(row=1, column=1)
dob_1.grid(row=2, column=1)
address_1.grid(row=3, column=1)
physician_name_1.grid(row=4, column=1)

tk.Button(master, 
          text='Proceed', command=proceed_image).grid(row=5, 
                                                       column=1, 
                                                       sticky=tk.W, 
                                                       pady=4)

master.mainloop()
